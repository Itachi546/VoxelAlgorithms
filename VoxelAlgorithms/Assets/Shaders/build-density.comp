#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(r32f, binding = 0) uniform image3D uDensityTexture;

float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

	return o4.y * d.y + o4.x *	(1.0 - d.y);
}

float map(vec3 p)
{
	return min(p.y - 8.0f, length(p - 17.0f) - 8.0f);
/*
   float d = 0.0f;
   float a = 50.0f;
   float f = 0.08f;
   vec3 wp = p;
   for(int i = 0; i < 8; ++i) {
      d += a * (noise(wp * f) * 2.0f - 1.0f);
      a *= 0.5f;
      f *= 2.0f;
   }
   d += clamp((p.y - 15.0) * 3.0, 0.0, 1.0) * 40.0;
   return d;
   */
}

void main() 
{
  ivec3 uv = ivec3(gl_GlobalInvocationID.xyz);
  float density = map(uv);
  imageStore(uDensityTexture, uv, vec4(density));
}

